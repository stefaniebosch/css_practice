/*selector {declaration;} --,same as-- selector {property:value;}
the universal selector (*) selects every element on the page, ex.: * {...:...} applies to everything
if multiple selectors have the same style definitions, they can be grouped together: h1, h2, h3 {...:...}*/

/*ids and class names cannot start with numbers*/

/*if multiple style sheets are used, the most recently read style sheet will be used ->cascading order 
ex: first inline, then external/internal (depending on which was defined first), then browser default*/

/*css specificity rules 
start at 0, add 1000 for style attribue, 100 per ID, 10 per attribute/class/pseudo-class, 1 per element name/pseudo-element
examples:
h1                                                                 1 point (1 element)
#content h1                                                        101 points (1 id, 1 element)
<div id="content"><h1 style="color: #ffffff">Heading</h1></div>    1000 points (inline styling), so highest specificity, is applied

if equal specificity: latest rule counts. ex:
h1 {background-color: yellow;}
h1 {background-color: red;} <-- latest, so will be red

id selectors have higher specificity than attribute selectors. ex:
div#a {background-color: green;} <--most specific, so will be applied
#a {background-color: yellow;} <--second most specific
div[id=a] {background-color: blue;} <--least specific

if same style type defined both in external css file and html file, html file is 'closer' to element, is applied

a class selector beats element selectors, ex:
.intro {background-color: yellow;} <--will be used
h1 {background-color: red;}

universal values (*) and inhereited values have a specificity of 0*/

/*background properties can all be in one declaration as long as they are declared in this order, ex:
background : background-color  background-image background-repeat backgrount-attachment background-position; 
background { #ffffff url("hi.png") no-repeat right top; } */

/*<div> <p> ... </p> </div> <--- div is parent element of p, so p can inherit margin property of div*/

/* font: font-style font-variant font-weight font-size/line-height font-family ...font-size and font-family required*/

/*p:first-child {} --> only affects the first p element that is first child of any element, eg. just first p in many p's
p i:first-child {} --> affects first i in each p element
p:first-child i {} --> affects all i's in first p element*/

/*q:lang(no) {quotes:"~" "~";} --> defines quotation marks for <q> elements with lang="no"; :lang defines special rules
for different languages*/

/*input:focus {background-color:blue;} --> when input text field is clicked (focused on), background color will change*/

/*css [attribute] selector, ex: a[target]{...} just styles links with a target attribute
[attribute="value"] selector, ex: a[target="_blank"]{...} selects all a elements with target=_blank value
[attribute~="value"] selector, ex: [title~="flower"]{...} selects all titles with 'flower' in it, separated by spaces
[attribute|="value"] selector, ex: [class|="top"]{...} selects elements with class=top or class=top-....
[attribute^="value"] selector, ex: [class^="top"]{...} selects elements with class starting with top, like top-.. or top.. or top ..
[attribute$="value"] selector, ex: [class$="test"]{...} selects elements with class ending in test, like ...-test or ... test or ..test
[attribute*="value"] selector, ex: [class*="te"]{...} selects elements with te substring anywhere in class name, like test, xtex
can use attribute selectors to for ex. style forms without classes or ids, ex: input[type="text"]{}, input[type="button"]{}*/

/*css counters are "variables" maintained by css whose values can be incremented by css rules, which track how many times they are
used; counters let you adjust the appearance of the content based on its placement in the document, so you don't have to
change each individual one but it intstead changes automatically
eg: body{counter-reset:section;} h2::before{counter-increment:section; content:"Section " counter(section) ": ";
^^counter for page is created, each h2 element will start with Section x:  , can also use subsection to nest sections
counter can also be used in outlined lists because new instance of counter is created automatically*/

/*size in px = pixels;
absolute length: fixed size, elements will then be exactly that size; not recommended for screen use because we cannot know the 
exact screen size, only recommended when size is known eg. printing paper; examples: cm, mm, in, px, pt, pc
relative length: specifies a size relative to another length property; scales better than absolute lengths between different
rendering mediums; examples: em, ex, ch, rem, vw, vh, vmin, vmax, %; (em and rem units are best for creating scalable layout)*/

/*overall*/

::selection {
    /*rules for when user highlights something on web page*/
    color: greenyellow;
    background-color: black;
}

::-moz-selection {
    /*code for firefox browsers*/
    color: greenyellow;
    background-color: black;
}

/*html elements*/

input[type=text] {
    padding: 12px 20px;
    margin: 8px 0;
    box-sizing: border-box; /*includes padding and margin in width and height*/
    border: 1px solid #ccc;
    border-radius: 4px; /*rounds the edges of the border*/
}

input[type=text]:focus {
    border: 2px solid #777;
}

table, td, th {
    border: 1px solid darkgray;
    /*border-bottom: ... to just have horizontal dividers*/
    /*if table element has id, then use ex.: #id td, #id th, #id tr:hover, etc.*/
}

table {
    width: 50%; /*max-width is more compatible for smaller screen sizes (vs. width)*/
    border-collapse: collapse;
    margin: auto;
    position: static; /*default positioning*/
}

th {
    height: 30px;
    background-color: deeppink;
    color: black;
}

tr:nth-child(even) {
    background-color: #d1cccc;;
}

tr:hover {
    /*selector:pseudo-class*/
    /*pseudo-classes are used to define a special state of an element*/
    /*selector::pseudo-element*/
    /*pseudo-elements, on the other hand, are used to style specified parts of an element*/
    /*::before adds content before each instance of an element, ::after adds content after element*/
    /*::marker can style the markers of list items, ex. bullets and numbers*/
    background-color: #fcdef9;
}

th, td {
    padding: 15px;
    text-align: left;
    /*text-align: center, or left, or right; th is center by default; td left by default*/
    /*vertical-align: bottom/middle/top;, th and td have middle by default*/
}

body {
    background-color: lavenderblush;
    font-size: 100%; /*set default font-size in percent for body, so setting 'em' everywhere else works when user resizes font*/
    overflow-x: hidden;
}

h1:hover {
    /*hover can apply to other elements as well, not just links*/
    background-color: darkred;
    color: beige;
}

h4 {
    text-align: center;
}

p {
    color: slateblue;
    text-align: center;
}

p::first-letter {
    /*also ::first-line*/
    /*the first letter of every p element will be stylized like stated below*/
    /*pseudo-elements can be combined with classes, ex: p.intro::first-letter, and combined with each other*/
    /*ex: p::before or p::after {content: url(xxx.gif);}*/
    color: palevioletred;
    font-size: xx-large;
}

/*individual ids*/

#fname, #lname, #select_form, #text_area {
    float: left;
    width: 85%;
}

#fname_label, #lname_label, #select_label, #text_label {
    float: left;
    width: 15%;
    margin-top: 18px;
}

@media screen and (max-width: 600px) {
    #fname, #lname, #select_form, #text_area, #fname_label, #lname_label, #select_label, #text_label {
        width: 100%;
        margin-top: 0;
    }
}

#form_div {
    border-radius: 5px;
    background-color: #dbdbdb;
    padding: 20px;
}

#submit_button {
    background-color: rgb(45, 0, 66);
    border: none;
    color: white;
    padding: 16px 32px;
    text-decoration: none;
    margin: 20px 8px;
    cursor: pointer;
}

#submit_button:hover {
    background-color: rgb(103, 50, 128);
}

#select_form {
    padding: 16px 20px;
    border: none;
    border-radius: 4px;
    background-color: #f1f1f1;
    margin: 8px 0px 15px 0px;  
}

#text_area {
    height: 150px;
    padding: 12px 20px;
    box-sizing: border-box;
    border: 2px solid #ccc;
    border-radius: 4px;
    background-color: #f8f8f8;
    font-size: 16px;
    resize: none;
}

#search {
    width: 130px;
    margin: 8px 0;
    box-sizing: border-box; /*includes padding and margin in width and height*/
    border: 1px solid #ccc;
    border-radius: 4px; /*rounds the edges of the border*/
    background-image: url(search_icon.png);
    background-position: 5px 5px;
    background-repeat: no-repeat;
    padding: 12px 20px 12px 50px;
    transition: width 0.4s ease-in-out; /*changes width, transition takes 0.4 seconds, slow start and slow end*/
}

#search:focus {
    width: 100%; /*when clicked on the width will change to 100% based on transition*/
    border: 2px solid #777;
}

#navlist {
    position: relative;
}

#navlist li {
    margin: 0;
    padding: 0;
    list-style: none;
    position: absolute;
    top: 0;
}

#navlist li, #navlist a {
    height: 44px;
    display: block;
}

#house {
    left: 0px; /*starts on very left*/
    width: 46px;
    background: url('img_navsprites.gif') 0 0; 
    /*background image and starting position in overall image: image, left px, top px*/
}

#house a:hover {
    background: url('img_navsprites.gif') 0 -45px;
}

#arrow {
    left: 66px; /*46px of house + 20px in between*/
    width: 43px;
    background: url('img_navsprites.gif') -91.2px 0;
}

#arrow a:hover {
    background: url('img_navsprites.gif') -91.2px -45px;
}

#dropdown_image {
    position:relative;
    display: inline-block;
}

#dropdown_img_content {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
}

#dropdown_image:hover #dropdown_img_content {
    display: block;
}

#happy_shibe {
    /*to center an image, set width, display to block, and set left and right margins*/
    width: 15%;
}

#big_happy_shibe {
    width: 100%;
}

#auto_overflow {
    overflow: auto;
    /*can also just change overflow-x or overflow-y values specifically instead of both at once*/
    width: 300px;
    height: 50px;
    border: 1px dotted black;
    float: right; /*or left, or none (default)*/
}

#scroll_overflow {
    overflow: scroll;
    width: 300px;
    height: 50px;
    border: 1px dotted black;
    float: right;
}

#hidden_overflow {
    overflow: hidden;
    width: 300px;
    height: 50px;
    border: 1px dotted black;
    float: right;
}

#visible_overflow {
    /*can use .clearfix::after{content:"";clear:both;display:table;} to solve overflow problem*/
    overflow: visible; /*default*/
    width: 300px;
    height: 50px;
    border: 1px dotted black;
    float: right;
}

#link_list li {
    display: inline; /*makes elements inline vs block, so they do not start on a new line*/
    /*display: none; does not take up space, page acts as if it is not there*/
    /*visibility: hidden; does not show up but it still takes up space as if it was being shown*/
}

#div_table {
    overflow-x: auto; /*displays horizontal scroll bar if screen too small to show all content*/
    clear: right; 
    /*moves element under defined oriented element (eg. overflow elements are float: right, so here
    clear: right; moves table under right element; can also be left, or both*/
}

#material_icons{
    text-align: left;
    color: black;
}

#middle_cloud {
    font-size: 50px;
}

#large_cloud {
    font-size: 100px;
}

#large_blue_cloud {
    font-size: 100px;
    color: lightblue;
}

#large_red_cloud {
    font-size: 100px;
    color: lightcoral;
}

#computer_icon {
    font-size: 100px;
    color:rgb(104, 104, 104);
    text-shadow: 5px 5px 10px rgb(7, 49, 23);
    position: sticky; /*toggles between relative and fixed positioning; fixed when scrolled past a certain point, else relative*/
    bottom: 5px;
    z-index: -1; /*when overlapping with other elements, it will be positioned behind them*/
}

#left_align {
    font-size: 20px;
    text-align: left;
    text-transform: uppercase; /*or lowercase, capitalize*/
    letter-spacing: -2px;
    text-shadow: 2px 2px 5px purple; /* horizontal shadow, vertical shadow, blur effect, color*/
}

#center_align {
    text-align: center; /*centers text inside element*/
    text-decoration: line-through; /*or overline, underline (usually just used for links), none to make links not have underline*/
    letter-spacing: 5px;
    word-spacing: 10px; /*can also be negative*/
    /*white-space: nowrap -> makes the words run off the page vs get wrapped to next line*/
    font-weight: bold; /*or normal, lighter, a specific number*/
}

#right_align {
    text-align: right;
    /*vertical-align: top/middle/bottom -> ex. align image within text */
    direction: rtl;
    unicode-bidi: bidi-override;
}

#justify_align {
    text-align: justify;
    width: 100px;
    border: 1px solid black;
    padding: 10px;
    text-indent: 30px;
    line-height: 0.7;
}

#box_model {
    color: goldenrod;
    width: 300px;
    padding: 30px;
    border: 20px solid khaki;
    margin: 10px;
    outline-style: solid;
    outline-color: black; /*can also use 'invert'*/
    outline-width: thin;
    outline-offset: 3px;
    /*outline shorthand-> outline: outline-width outline-style outline-color*/
    /*outline does not count towards total width; outline can overlap with other elements*/
    /*total width = 300px + 30px + 30px + 20px + 20px + 10px + 10px = 420px */
}

#special_paragraph {
    color: green;
    font-size: 20px;
}

#background_test {
    color: white;
    background-color: sienna;
    opacity: 0.3; /*also makes child elements transparent*/
}

#background_test2 {
    color: black;
    background-color: rgb(201,160,207, 0.8); /*child elements are not transparent; just the background*/
    margin: 0 0 50px 0; 
    /*test2 has 50 bottom margin and test3 has 20 top margin, because of margin collapse instead of 70px
    between the two, there is only 50px*/
}

#background_test3 {
    color: hsl(0, 0%, 71%);
    background-color: rgb(50,50,50);
    margin: 20px 0 0 0;
}

#background_test4 {
    color: #f0f; /*same as ff00ff*/
    background-color: #faf; /*same as ffeeff*/
    width: 300px;
    margin: auto; /*centers element, margin equally placed on left and right sides*/
}

#background_test5 {
    color: hsl(30,77%,12%,0.9);
    background-color: hsl(214,44%,63%);
    /*also margin-top, margin-bottom, margin-left, margin-right, or margin: top right bottom left*/
    margin: 70px; /*creates space around elements, can also use percentages or auto or inherit*/
}

#border_test {
    color: darkolivegreen;
    border: 7px dotted chartreuse; /*shorthand for border-width border-style (required) border-color*/
    /* height and width does not include padding, margin, or borders; can use auto, length, percent, initial, inherit*/
    /*can also set min-width and min-height*/
    /*use max-width property instead of width so if screen is smaller, the element will also shrink vs width it stays the same*/
    height: 50px;
    width: 75%;
    margin-left: 13%;
    font-variant: small-caps;
}

#border_test2 {
    border-style: inset;
    border-width: 3px 10px; /* x y -> top/bottom left/right; w x y z -> top, right, bottom, left x y z -> top, left/right, bottom*/
    font-style: italic;
}

#border_test3 {
    border-top-style: double; /*border-top-color, border-top-width*/
    border-right-style: solid;
    border-bottom-style: ridge;
    border-left-style: dashed;
    border-width: 4px;
    border-color: green blue indigo purple;
}

#border_test4 {
    border-top: 5px solid salmon;
    background-color: lightgray;
    padding: 50px;
    width: 300px;
    box-sizing: border-box;
    margin: auto; /*centers the element, automatically puts remaining space in left and right margins*/
    /*width propery must be set (but not at 100%) for margin:auto to work*/
}

#border_test5 {
    border: 3px solid goldenrod;
    border-radius: 12px;
    /* padding: top right bottom left*/
    /* if padding (left/right) and width are defined, the total width is width + left padding + right padding*/
    /* add box-sizing: border-box; property to keep width without adding padding space*/
    padding: 70px; /*also padding-top, padding-right, padding-bottom, padding-left, can use length, percent, inherit*/
}

#background_image {
    color: yellow;
    background-repeat: no-repeat; /*ex: repeat-x or repeat-y*/
    background-image: url(dandelions.jpg);
    background-position: center; /*ex: right top*/
    background-attachment: scroll; /*image scrolls up with page, else use fixed*/
    position: fixed; /*always stays in same position even if page is scrolled; positioned relative to the viewport*/
    width: 300px;
    margin: auto;
    bottom: 0;
    right: 0;
}

/*classes*/

.footer {
    text-align: center;
    font-family: "Courier New", Courier, monospace; /*first is wanted font, second and third are more generic back up fonts*/
    /*some fonts pair really well together, examples on w3schools css tutorial fonts -> font pairings*/
    /*^ex. Helvetica for headings, Garamond for text*/
    font-variant: normal;
    padding: 10px;
    background-color: rgb(196, 179, 195);
}

.header {
    text-align: center;
    font-family: "Courier New", Courier, monospace; /*first is wanted font, second and third are more generic back up fonts*/
    /*some fonts pair really well together, examples on w3schools css tutorial fonts -> font pairings*/
    /*^ex. Helvetica for headings, Garamond for text*/
    font-size: 1.5em; /*=40px, but this way the size scales when users resize the text size of browser; pixels/16=em */
    /*can also set font-size in vw (viewport width), 1vw = 1% of viewport width; scales with size of viewport*/
    font-variant: normal;
    padding: 10px;
    background-color: rgb(196, 179, 195);
}

.desc {
    text-align: left;
}

div.gallery {
    border: 1px solid #ccc;
}

div.gallery:hover {
    border: 1px solid #777;
}

div.gallery img {
    width: 100%;
    height: auto;
}

div.shiba_description {
    padding: 15px;
    text-align: center;
}

.responsive {
    padding: 0 6px;
    float: left;
    width: 24.99999%;
    box-sizing: border-box;
}

@media only screen and (max-width: 700px) {
    .responsive {
        width: 49.99999%;
        margin: 60px 0;
    }
}

@media only screen and (max-width: 500px) {
    .responsive {
        width: 100%;
    }
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
}

.box_background {
    background: url(long_shibe.jpg);
    background-size: 150px auto;
    border: 2px solid black;
}

.transparent_box {
    margin: 20px;
    background-color: #ffffff;
    border: 1px solid black;
    opacity: 0.6;
}

.transparent_box p {
    color: black;
    font-size: 25px;
    font-weight: bold;
}

.transparent_shibe {
    opacity: 0.5; /*0.0 fully transparent, 0.5 50% opacity, 1.0 normal*/
    /*opacity can effect child elements (like p elements), which can make text difficult to read; use rgba values instead,
    for example: background: rgba(x, x, x, opacity value); so text is still readable*/
}

.transparent_shibe:hover {
    opacity: 1.0;
}

.opacity {
    background: rgb(212, 69, 2);
    opacity: 0.3; /*also makes text transparent*/
}

.rgba {
    background: rgba(212, 69, 2, 0.3); /*only effects background, text still readable*/
}

.hidden_element {
    display: none;
    background-color: cadetblue;
    padding: 10px;
}

div:hover p {
    /*when hovering over a div, display p as block element*/
    display:block;
}

.centered_flexbox {
    display: flex;
    justify-content: center; /*horizontally aligned*/
    align-items: center; /*vertically aligned*/
    height: 100px;
    border: 3px dotted darkorchid;
}

.right_align2 {
    float: right;
    border: 2px dashed darkkhaki;
    padding: 5px;
}

.right_align {
    position: absolute; /*using this, elements can overlap each other*/
    right: 0px;
    border: 2px dashed darkkhaki;
    padding: 5px;
}

.inline {
    display: inline; /*default for span element, but cannot set width or height*/
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 2px solid olive;
    background: orchid;
}

.inline-block {
    display: inline-block; /*can set width and height, is on same line as other elements*/
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 2px solid olive;
    background: orchid;
}

.block {
    display: block; /*starts on new line*/
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 2px solid olive;
    background: orchid;
}

.menu {
    list-style-type: none;
    margin: 0;
    padding: 0;
    /*^these three settings get rid of the default settings*/
    /* overflow: hidden; --> prevents li elements from going outside of the list, but because of dropdown menu
    this was removed */
    background-color: #333;
    /*add position:fixed; top:0; width:100%; to make menu stay fixed at top of screen, even while scrolling; for this however,
    the first element under it would need a padding and margin-top to make sure it does not overlap with the menu bar*/
    position: -webkit-sticky; /*for Safari browsers*/
    position: sticky; /*'sticks' to top of screen when scrolled down enough*/
    top: 0;
}

.menu_item a, .dropdown_button {
    /*'higher up', so for example settings for the whole menu are chosen first, if that contradicts with other settings 
    more specific to an element ex. li, these settings are then ignored*/
    color: white;
    display: block;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}

.menu_item {
    float: left; 
    /*could also do display:inline to get horizontal navigation bar, since li element is a block element and this way
    everything is displayed on one line*/
    /*add border-right:1px solid white; and for .menu_item:last-child{border-right:none;} to create link dividers*/
}

.dropdown:hover .dropdown_button, .menu_item a:hover:not(.active) { 
    /*only effects what is not currently set as active class*/
    background-color: #111;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown_content {
    display: none;
    position: absolute;
    /*add right:0; to make content go from right to left, eg. if button is on right side*/
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1; /*dropdown items will be placed above other elements*/
}

.dropdown_content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    text-align: left;
}

.dropdown_content a:hover {
    background-color: #f1f1f1;
}

.dropdown:hover .dropdown_content {
    display: block;
}

/*class can be assigned to which link is active, figure out how to change this probably when learning javascript*/
.menu_item a.active {
    background-color: blue;
}

.right_float {
    float: right;
}

@media screen and (max-width: 600px) {
    /*if the screen size is below 600 pixels, the horizontal menu turns into a vertical menu*/
    .menu .right_float,
    .menu .menu_item {float: none;}
}

.vertical_menu {
    /*to make the menu stay on the left side, set width to 25%, height to 100%, position to fixed, overflow to auto, and every element 
    that will be to the right of the menu will need a left margin of 25%, for example put inside a div, else everything would overlap 
    with the menu; but this might not work properly on mobile devices*/
    list-style-type: none;
    margin: 0;
    padding: 0;
    width: 20%;
    border: 1px solid black;
    background-color: lightgreen;
}

.vertical_menu li {
    text-align: center;
    border-bottom: 1px solid black;;
}

.vertical_menu li:last-child {
    border-bottom: none;
}

.vertical_menu a {
    display: block; /*makes the whole link area is clickable, not just the text*/
    padding: 12px 16px;
    text-decoration: none;
    color: black;
}

.vertical_menu a:hover {
    background-color: black;
    color: lightgreen;
}

/*if element is taller than the element containing it, and it is positioned by float, it will overflow outside of its
container. use clearfix hack to "fix" this problem*/
.clearfix::after {
    content: "";
    clear: both;
    display: table;
}

.uneven_box {
    float: left;
    padding: 50px;
    box-sizing: border-box;
    text-align: center;
}

.side {
    width: 25%;
    background-color: rgb(185, 148, 148);
}

.middle {
    width: 50%;
    background-color: rgb(71, 51, 51);
}

.box {
    float: left;
    width: 33.3%;
    padding: 50px;
    box-sizing: border-box; /*includes padding and borders in the boxes size, so all three boxes fit on same line*/
    text-align: center;
}

@media screen and (max-width: 600px) {
    .box, .uneven_box {
        width: 100%;
    }
}

.first {
    background-color: rgb(66, 66, 66);
}

.second {
    background-color: rgb(173, 173, 173);
}

.third {
    background-color: rgb(230, 228, 228);
}

ul.picture_bullets {
    list-style: circle inside url('dog_circle.jpg');
    /*order: list-style: list-style-type list-style-position list-style-image;*/
    /*list-style-position: inside; pushes the text-> is 'outside' by default*/
    position: relative; /*positioned relative to its normal position, other content will not be adjusted to fill gap*/
    /*position: absoute; positioned relative to the nearest positioned ancestor (anything except static position default)*/
    left: 50px;
}

ul.unordered1 {
    list-style-type: circle; 
    /*set to 'none' to remove bullets, also set margin and padding to 0 to remove default margin and padding*/
    background: rgb(7,239,181);
    padding: 20px;
}

ol.ordered1 {
    list-style-type: hiragana;
    background: rgb(30,11,96);
    color: white;
    padding: 50px;
}

ol.ordered1 li {
    /*^space=descendant selector: selects all li elements that are inside the ol.ordered1 element*/
    /*> is child selector, eg. ol.ordered1 > li*/
    /*adjacent sibling selector: ol.ordered1 + li ---> select element directly after another element*/
    /*general sibling selector: ol.ordered ~ li ---> select elements that are next sibling of specified element*/
    background: rgb(74, 46, 179);
    margin: 5px;
}

ul.unordered1 li {
    background: rgb(11, 172, 131);
    padding: 5px 0; /*to vertically center text; can also set line-height and height as same number*/
    text-align: center; /*to horizontally center text*/
}

a.first_link:link {
    color:blue;
    /*text-decoration: none -> removes underline from link (or text-decoration: underline;)*/
}

a.first_link:visited {
    color:lightskyblue;
}

a.first_link:hover { /*a:hover must come after a:link and a:visited*/
    color: maroon;
    background-color: lightgray;
    cursor: wait;
}

a.first_link:active { /*a:active must come after a:hover*/
    color: gray;
}

a.second_link:link, a.second_link:visited, a.second_link:hover, a.second_link:active {
    border: 2px solid rgb(7, 49, 23);
    color: black;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
}

a.second_link:hover {
    background-color:rgb(7, 49, 23);
    color:peachpuff;
    cursor: crosshair;
}

p.orange {
    font-size: 10px;
}

.orange {
    color: orange;
}

.large {
    font-size: 25px;
}